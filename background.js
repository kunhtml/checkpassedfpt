// background.js - Service Worker cho Chrome Extension T·ª± ƒê·ªông Check Passed FPT

class AutoF5Background {
  constructor() {
    this.timerId = null;
    this.countdownTime = 30; // Th·ªùi gian m·∫∑c ƒë·ªãnh
    this.timeLeft = 30;
    this.isRunning = false;
    this.tabId = null;
    this.activeTabId = null; // Tab ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh ƒë·ªÉ ch·∫°y t·ª± ƒë·ªông check passed FPT
    this.refreshCount = 0; // S·ªë l·∫ßn ƒë√£ F5
    this.totalTime = 0; // T·ªïng th·ªùi gian ch·∫°y (gi√¢y)
    this.sessionStartTime = null; // Th·ªùi ƒëi·ªÉm b·∫Øt ƒë·∫ßu session
    this.soundDuration = 30; // Th·ªùi gian ph√°t √¢m thanh m·∫∑c ƒë·ªãnh (gi√¢y)

    this.initializeExtension();
  }
  initializeExtension() {
    // L·∫Øng nghe messages t·ª´ popup
    chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
      this.handleMessage(message, sender, sendResponse);
      return true; // ƒê·ªÉ c√≥ th·ªÉ sendResponse async
    });

    // Load settings khi kh·ªüi ƒë·ªông
    this.loadSettings();

    // C·∫≠p nh·∫≠t badge icon
    this.updateBadge();
  }
  async loadSettings() {
    try {
      const result = await chrome.storage.local.get([
        "countdownTime",
        "isRunning",
        "timeLeft",
        "refreshCount",
        "totalTime",
        "activeTabId",
        "tabId", // Load tab ID
        "soundDuration", // Load sound duration
      ]);

      if (result.countdownTime) {
        this.countdownTime = result.countdownTime;
        this.timeLeft = result.timeLeft || result.countdownTime;
      }

      // Load statistics
      this.refreshCount = result.refreshCount || 0;
      this.totalTime = result.totalTime || 0; // Load active tab ID
      this.activeTabId = result.activeTabId || null;

      // Load tab ID if exists
      if (result.tabId) {
        this.tabId = result.tabId;
        console.log("ƒê√£ kh√¥i ph·ª•c tab ID:", this.tabId);
      }

      // Load sound duration
      if (result.soundDuration) {
        this.soundDuration = result.soundDuration;
        console.log("ƒê√£ kh√¥i ph·ª•c sound duration:", this.soundDuration);
      }

      // Kh√¥ng t·ª± ƒë·ªông kh√¥i ph·ª•c timer khi restart extension ƒë·ªÉ tr√°nh l·ªói
      this.isRunning = false;
      await this.saveState();
    } catch (error) {
      console.error("L·ªói khi load settings:", error);
    }
  }

  async handleMessage(message, sender, sendResponse) {
    try {
      switch (message.type) {
        case "startTimer":
          await this.startTimer();
          sendResponse({ success: true });
          break;

        case "stopTimer":
          await this.stopTimer();
          sendResponse({ success: true });
          break;

        case "resetTimer":
          await this.resetTimer();
          sendResponse({ success: true });
          break;
        case "setTime":
          await this.setTime(message.time);
          sendResponse({ success: true });
          break;

        case "setSoundDuration":
          await this.setSoundDuration(message.duration);
          sendResponse({ success: true });
          break;
        case "getStatus":
          sendResponse({
            isRunning: this.isRunning,
            timeLeft: this.timeLeft,
            countdownTime: this.countdownTime,
            refreshCount: this.refreshCount,
            totalTime: this.totalTime,
          });
          break;
        case "resetStats":
          await this.resetStats();
          sendResponse({ success: true });
          break;

        case "passedDetected":
          await this.handlePassedDetected();
          sendResponse({ success: true });
          break;

        default:
          sendResponse({ success: false, error: "Unknown message type" });
      }
    } catch (error) {
      console.error("L·ªói khi x·ª≠ l√Ω message:", error);
      sendResponse({ success: false, error: error.message });
    }
  }
  async startTimer() {
    if (this.isRunning) return;

    // L·∫•y tab hi·ªán t·∫°i v√† ki·ªÉm tra URL
    const tabs = await chrome.tabs.query({ active: true, currentWindow: true });
    if (tabs.length > 0) {
      // Ki·ªÉm tra URL tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu
      if (!this.isValidURL(tabs[0].url)) {
        console.log("Extension ch·ªâ ho·∫°t ƒë·ªông tr√™n trang FPT Grade!");
        return;
      }

      // L∆∞u l·∫°i tab ID c·ªßa trang FPT Grade
      this.tabId = tabs[0].id;
      console.log(
        "ƒê√£ l∆∞u tab FPT Grade v·ªõi ID:",
        this.tabId,
        "URL:",
        tabs[0].url
      );
    } else {
      console.error("Kh√¥ng t√¨m th·∫•y tab hi·ªán t·∫°i");
      return;
    }

    this.isRunning = true;
    this.timeLeft = this.countdownTime;
    this.sessionStartTime = Date.now(); // B·∫Øt ƒë·∫ßu ƒë·∫øm th·ªùi gian session

    this.timerId = setInterval(() => {
      this.tick();
    }, 1000);

    await this.saveState();
    this.notifyPopup();
    this.updateBadge();

    console.log("Timer b·∫Øt ƒë·∫ßu cho tab FPT Grade:", this.countdownTime, "gi√¢y");
  }
  async stopTimer() {
    if (!this.isRunning) return;

    // C·∫≠p nh·∫≠t t·ªïng th·ªùi gian ch·∫°y
    if (this.sessionStartTime) {
      const sessionDuration = Math.floor(
        (Date.now() - this.sessionStartTime) / 1000
      );
      this.totalTime += sessionDuration;
      this.sessionStartTime = null;
    }

    this.isRunning = false;

    if (this.timerId) {
      clearInterval(this.timerId);
      this.timerId = null;
    }

    await this.saveState();
    this.notifyPopup();
    this.updateBadge();

    console.log("Timer ƒë√£ d·ª´ng");
  }

  async resetTimer() {
    await this.stopTimer();
    this.timeLeft = this.countdownTime;

    await this.saveState();
    this.notifyPopup();
    this.updateBadge();

    console.log("Timer ƒë√£ reset");
  }
  async setTime(newTime) {
    this.countdownTime = newTime;

    if (!this.isRunning) {
      this.timeLeft = newTime;
    }

    await this.saveState();
    console.log("Th·ªùi gian ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t:", newTime, "gi√¢y");
  }

  async setSoundDuration(newDuration) {
    this.soundDuration = newDuration;
    await this.saveState();
    console.log("Th·ªùi gian √¢m thanh ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t:", newDuration, "gi√¢y");
  }

  async tick() {
    this.timeLeft--;

    if (this.timeLeft <= 0) {
      await this.refreshPage();
      this.timeLeft = this.countdownTime; // Reset cho chu k·ª≥ ti·∫øp theo
    }

    await this.saveState();
    this.notifyPopup();
    this.updateBadge();
  }
  async refreshPage() {
    try {
      if (this.tabId) {
        // Ki·ªÉm tra xem tab c√≤n t·ªìn t·∫°i v√† c√≥ ƒë√∫ng URL kh√¥ng
        try {
          const tab = await chrome.tabs.get(this.tabId);

          // Ki·ªÉm tra URL ƒë·ªÉ ƒë·∫£m b·∫£o ƒë√¢y l√† tab FPT Grade
          if (!this.isValidURL(tab.url)) {
            console.log("Tab kh√¥ng ph·∫£i FPT Grade, d·ª´ng auto refresh");
            await this.stopTimer();
            return;
          }

          // Refresh tab
          await chrome.tabs.reload(this.tabId);

          // TƒÉng s·ªë l·∫ßn F5
          this.refreshCount++;
          await this.saveState();

          console.log(
            "ƒê√£ refresh trang FPT Grade, tab ID:",
            this.tabId,
            "- L·∫ßn th·ª©:",
            this.refreshCount
          );

          // Hi·ªÉn th·ªã notification
          await this.showNotification();

          // Th√¥ng b√°o v·ªÅ vi·ªác refresh ƒë·∫øn popup v√† content script
          this.notifyRefresh();
        } catch (tabError) {
          console.error(
            "Tab kh√¥ng c√≤n t·ªìn t·∫°i ho·∫∑c kh√¥ng th·ªÉ truy c·∫≠p:",
            tabError
          );
          console.log("D·ª´ng timer v√¨ tab ƒë√£ b·ªã ƒë√≥ng");
          await this.stopTimer();
        }
      } else {
        console.error("Kh√¥ng t√¨m th·∫•y tab ƒë·ªÉ refresh");
        await this.stopTimer();
      }
    } catch (error) {
      console.error("L·ªói khi refresh trang:", error);
    }
  }
  async showNotification() {
    try {
      await chrome.notifications.create({
        type: "basic",
        iconUrl: "icons/icon48.png",
        title: "T·ª± ƒê·ªông Check Passed FPT",
        message: `Trang ƒë√£ ƒë∆∞·ª£c refresh t·ª± ƒë·ªông! (L·∫ßn ${this.refreshCount})`,
      });
    } catch (error) {
      console.error("L·ªói khi hi·ªÉn th·ªã notification:", error);
    }
  }
  async showPassedNotification() {
    try {
      await chrome.notifications.create({
        type: "basic",
        iconUrl: "icons/icon48.png",
        title: "üéâ PASSED - T·ª± ƒê·ªông Check Passed FPT",
        message: "Ch√∫c m·ª´ng! ƒêi·ªÉm ƒë√£ PASSED. Timer ƒë√£ t·ª± ƒë·ªông d·ª´ng.",
        requireInteraction: true, // Notification kh√¥ng t·ª± ƒë·ªông bi·∫øn m·∫•t
      });
    } catch (error) {
      console.error("L·ªói khi hi·ªÉn th·ªã notification PASSED:", error);
    }
  }
  async handlePassedDetected() {
    try {
      // D·ª´ng timer
      await this.stopTimer();

      // Hi·ªÉn th·ªã notification ƒë·∫∑c bi·ªát cho PASSED
      await this.showPassedNotification();

      // G·ª≠i th√¥ng tin sound duration ƒë·∫øn content script ƒë·ªÉ ph√°t √¢m thanh
      if (this.tabId) {
        try {
          await chrome.tabs.sendMessage(this.tabId, {
            type: "playPassedSound",
            duration: this.soundDuration,
          });
        } catch (error) {
          console.error("L·ªói khi g·ª≠i message ph√°t √¢m thanh:", error);
        }
      }

      console.log(
        "üéâ PASSED detected! Timer ƒë√£ d·ª´ng v√† notification ƒë√£ ƒë∆∞·ª£c g·ª≠i."
      );
    } catch (error) {
      console.error("L·ªói khi x·ª≠ l√Ω PASSED detection:", error);
    }
  }
  async saveState() {
    try {
      await chrome.storage.local.set({
        countdownTime: this.countdownTime,
        timeLeft: this.timeLeft,
        isRunning: this.isRunning,
        refreshCount: this.refreshCount,
        totalTime: this.totalTime,
        tabId: this.tabId, // L∆∞u tab ID
        soundDuration: this.soundDuration, // L∆∞u sound duration
      });
    } catch (error) {
      console.error("L·ªói khi l∆∞u state:", error);
    }
  }
  notifyPopup() {
    // G·ª≠i update ƒë·∫øn popup n·∫øu c√≥
    chrome.runtime
      .sendMessage({
        type: "timerUpdate",
        timeLeft: this.timeLeft,
        isRunning: this.isRunning,
        countdownTime: this.countdownTime,
      })
      .catch(() => {
        // Popup c√≥ th·ªÉ kh√¥ng m·ªü, b·ªè qua l·ªói
      });

    // G·ª≠i update ƒë·∫øn content script
    this.notifyContentScript();
  }
  async notifyContentScript() {
    try {
      if (this.tabId) {
        await chrome.tabs.sendMessage(this.tabId, {
          type: "timerUpdate",
          timeLeft: this.timeLeft,
          isRunning: this.isRunning,
          countdownTime: this.countdownTime,
          refreshCount: this.refreshCount,
          totalTime: this.totalTime,
        });
      }
    } catch (error) {
      // Content script c√≥ th·ªÉ ch∆∞a load, b·ªè qua l·ªói
    }
  }
  async resetStats() {
    this.refreshCount = 0;
    this.totalTime = 0;
    await this.saveState();

    // Th√¥ng b√°o v·ªÅ vi·ªác reset stats ƒë·∫øn popup
    chrome.runtime
      .sendMessage({
        type: "refreshHappened",
        refreshCount: this.refreshCount,
        totalTime: this.totalTime,
      })
      .catch(() => {
        // Popup c√≥ th·ªÉ kh√¥ng m·ªü, b·ªè qua l·ªói
      });

    // Th√¥ng b√°o ƒë·∫øn content script
    this.notifyContentScriptStats();

    console.log("ƒê√£ reset th·ªëng k√™");
  }

  notifyRefresh() {
    // Th√¥ng b√°o v·ªÅ vi·ªác refresh ƒë·∫øn popup
    chrome.runtime
      .sendMessage({
        type: "refreshHappened",
        refreshCount: this.refreshCount,
        totalTime: this.totalTime,
      })
      .catch(() => {
        // Popup c√≥ th·ªÉ kh√¥ng m·ªü, b·ªè qua l·ªói
      });

    // Th√¥ng b√°o ƒë·∫øn content script
    this.notifyContentScriptStats();
  }

  async notifyContentScriptStats() {
    try {
      if (this.tabId) {
        await chrome.tabs.sendMessage(this.tabId, {
          type: "refreshHappened",
          refreshCount: this.refreshCount,
          totalTime: this.totalTime,
        });
      }
    } catch (error) {
      // Content script c√≥ th·ªÉ ch∆∞a load, b·ªè qua l·ªói
    }
  }
  updateBadge() {
    const badgeText = this.isRunning ? this.timeLeft.toString() : "";
    const badgeColor = this.isRunning ? "#4CAF50" : "#f44336";

    chrome.action.setBadgeText({ text: badgeText });
    chrome.action.setBadgeBackgroundColor({ color: badgeColor });
  }

  isValidURL(url) {
    // Ch·ªâ ho·∫°t ƒë·ªông tr√™n trang FPT Grade
    const targetURL = "https://fap.fpt.edu.vn/Grade/StudentGrade.aspx";
    return url && url.startsWith(targetURL);
  }
}

// Kh·ªüi t·∫°o background service
const autoF5 = new AutoF5Background();
